{"version":3,"sources":["components/stocks.js","components/charts.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","paper","padding","spacing","margin","maxWidth","decrease","color","increase","Stocks","props","classes","getClassName","data","change","noChange","className","Paper","Grid","container","item","xs","sm","direction","alignItems","Typography","variant","name","Number","parseFloat","price","toFixed","updatedTimeStamp","getMonth","getDate","getFullYear","getUTCHours","getUTCMinutes","getUTCSeconds","Tooltip","title","Button","onClick","selectChart","ChartPage","lineData","labels","map","ele","time","datasets","label","fill","backgroundColor","borderColor","pointBorderColor","pointRadius","length","stocksList","overflowY","height","stocks","paddingBottom","ws","WebSocket","App","useState","Map","setStocksList","pauseStockUpdate","setPauseStockUpdate","chartData","setChartData","chartName","setChartName","useEffect","onopen","console","log","close","onmessage","message","stockUpdates","stocksListObj","currentData","JSON","parse","currentTime","Date","stock","has","currentValue","get","set","history","updateStockMarket","reloadlChart","value","justify","lg","IconButton","aria-label","style","float","fontSize","md","values","stockData","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4025fec1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Tooltip, Typography } from \"@material-ui/core\";\r\nimport ShowChartIcon from \"@material-ui/icons/ShowChart\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: 10,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    maxWidth: 500,\r\n  },\r\n  decrease: {\r\n    color: \"darkgreen\",\r\n  },\r\n  increase: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nconst Stocks = (props) => {\r\n  const classes = useStyles();\r\n  const handleChartToggle = () => {\r\n    props.selectChart(props.data.name);\r\n  };\r\n\r\n  const getClassName = () => {\r\n    return props.data.change === 0\r\n      ? classes.noChange\r\n      : props.data.change > 0\r\n      ? classes.increase\r\n      : classes.decrease;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm container>\r\n            <Grid\r\n              item\r\n              xs\r\n              container\r\n              direction=\"row\"\r\n              spacing={2}\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item container direction=\"column\" xs>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">{props.data.name}</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"caption\" className={getClassName()}>\r\n                    Price: ${Number.parseFloat(props.data.price).toFixed(3)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"caption\">Updated On:</Typography>\r\n                <Typography variant=\"body2\">\r\n                  {props.data.updatedTimeStamp.getMonth() +\r\n                    1 +\r\n                    \"/\" +\r\n                    props.data.updatedTimeStamp.getDate() +\r\n                    \"/\" +\r\n                    props.data.updatedTimeStamp.getFullYear()}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {props.data.updatedTimeStamp.getUTCHours() +\r\n                    \":\" +\r\n                    props.data.updatedTimeStamp.getUTCMinutes() +\r\n                    \":\" +\r\n                    props.data.updatedTimeStamp.getUTCSeconds()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Show chart\">\r\n                  <Button\r\n                    onClick={handleChartToggle}\r\n                    className={getClassName()}\r\n                  >\r\n                    <ShowChartIcon></ShowChartIcon>\r\n                  </Button>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stocks;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst getData = (data) => {\r\n  return (\r\n    data.getUTCHours() +\r\n    \":\" +\r\n    data.getUTCMinutes() +\r\n    \":\" +\r\n    data.getUTCSeconds()\r\n  );\r\n};\r\n\r\nconst ChartPage = (props) => {\r\n  const lineData = {\r\n    labels: props.data.map(ele => getData(ele.time)),\r\n    datasets: [\r\n      {\r\n        label: props.name,\r\n        fill: false,\r\n        backgroundColor: \"blue\",\r\n        borderColor: \"blue\",\r\n        pointBorderColor: \"blue\",\r\n        pointRadius: 2,\r\n        data: props.data.map((ele) => ele.price),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>{props.data.length !== 0 ? <Line data={lineData} /> : <></>}</div>\r\n  );\r\n};\r\n\r\nexport default ChartPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Stocks from \"./components/stocks\";\r\nimport Chart from \"./components/charts\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\r\nimport PauseCircleFilledIcon from \"@material-ui/icons/PauseCircleFilled\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  stocksList: {\r\n    flexGrow: 1,\r\n    overflowY: \"scroll\",\r\n    height: \"calc(100vh)\",\r\n    padding: \"0 10px\",\r\n  },\r\n  stocks: {\r\n    paddingBottom: 10,\r\n  },\r\n}));\r\n\r\nconst updateStockMarket = (stockUpdates, stocksListObj) => {\r\n  const currentData = JSON.parse(stockUpdates);\r\n  const currentTime = new Date();\r\n  for (const stock of currentData) {\r\n    if (stocksListObj.has(stock[0])) {\r\n      const currentValue = stocksListObj.get(stock[0]);\r\n      stocksListObj.set(stock[0], {\r\n        updatedTimeStamp: currentTime,\r\n        change: currentValue.price - stock[1],\r\n        price: stock[1],\r\n        history:\r\n          currentValue.history.length !== 0\r\n            ? [...currentValue.history, { price: stock[1], time: currentTime }]\r\n            : [{ price: currentValue.price, time: currentTime }],\r\n        name: stock[0],\r\n      });\r\n    } else {\r\n      stocksListObj.set(stock[0], {\r\n        updatedTimeStamp: currentTime,\r\n        change: 0,\r\n        price: stock[1],\r\n        history: [{ price: stock[1], time: currentTime }],\r\n        name: stock[0],\r\n      });\r\n    }\r\n  }\r\n  return stocksListObj;\r\n};\r\nconst ws = new WebSocket(\r\n  process.env.NODE_ENV === \"production\"\r\n    ? \"wss://trades-api.herokuapp.com/stocks\"\r\n    : \"ws://stocks.mnet.website\"\r\n);\r\nfunction App() {\r\n  const [stocksList, setStocksList] = useState(new Map());\r\n  const [pauseStockUpdate, setPauseStockUpdate] = useState(false);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [chartName, setChartName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    ws.onopen = () => {\r\n      console.log(\"connection Established\");\r\n    };\r\n\r\n    return function cleanup() {\r\n      ws.close();\r\n      console.log(\"connection closed\");\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ws.onmessage = (message) => {\r\n      if (!pauseStockUpdate) {\r\n        setStocksList(new Map(updateStockMarket(message.data, stocksList)));\r\n      }\r\n    };\r\n  }, [pauseStockUpdate, stocksList]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handlePause = () => {\r\n    setPauseStockUpdate(!pauseStockUpdate);\r\n  };\r\n\r\n  const reloadlChart = (value) => {\r\n    setChartData(stocksList.get(value).history);\r\n    setChartName(stocksList.get(value).name);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs={9} sm={8} lg={3}>\r\n            <h1>Stocks App</h1>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"play\"\r\n              style={{ float: \"right\" }}\r\n              onClick={handlePause}\r\n            >\r\n              {pauseStockUpdate ? (\r\n                <PlayCircleFilledIcon fontSize=\"large\" />\r\n              ) : (\r\n                <PauseCircleFilledIcon fontSize=\"large\" />\r\n              )}\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </section>\r\n      <Grid container>\r\n        <Grid item xs={12} md={3}>\r\n          <section className={classes.stocksList}>\r\n            {[...stocksList.values()].map((stockData, index) => (\r\n              <Stocks\r\n                className={classes.stocks}\r\n                key={\"stock-\" + index}\r\n                data={stockData}\r\n                selectChart={reloadlChart}\r\n              ></Stocks>\r\n            ))}\r\n          </section>\r\n        </Grid>\r\n        <Grid item xs={12} md={9}>\r\n          <section>\r\n            <Chart data={chartData} name={chartName}></Chart>\r\n          </section>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}