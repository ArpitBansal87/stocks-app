{"version":3,"sources":["components/stocks.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","paper","padding","spacing","margin","maxWidth","Stocks","props","classes","console","log","className","Paper","Grid","container","item","xs","sm","direction","Typography","variant","data","name","Number","parseFloat","price","toFixed","updatedTimeStamp","getMonth","getDate","getFullYear","getUTCHours","getUTCMinutes","getUTCSeconds","Button","primary","onClick","stocks","paddingBottom","App","useState","Map","stocksList","setStocksList","useEffect","updateStocksListing","updateStocks","stockUpdates","stocksListObj","currentData","JSON","parse","currentTime","Date","stock","has","currentValue","get","set","change","history","length","updateStockMarket","ws","WebSocket","onopen","onmessage","message","close","style","display","gridTemplateColumns","gap","values","map","stockData","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.acd5a6f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: 10,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    maxWidth: 500,\r\n  },\r\n}));\r\n\r\nconst Stocks = (props) => {\r\n  const classes = useStyles();\r\n  const handleTradeToggle = () => {\r\n    console.log(\"test\");\r\n  };\r\n  console.log(props);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm container>\r\n            <Grid item xs container direction=\"row\" spacing={2}>\r\n              <Grid item container direction=\"column\" xs>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">{props.data.name}</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"caption\">\r\n                    Price: ${Number.parseFloat(props.data.price).toFixed(3)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"caption\">Updated On:</Typography>\r\n                <Typography variant=\"body2\">\r\n                  {props.data.updatedTimeStamp.getMonth() +\r\n                    1 +\r\n                    \"/\" +\r\n                    props.data.updatedTimeStamp.getDate() +\r\n                    \"/\" +\r\n                    props.data.updatedTimeStamp.getFullYear()}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {props.data.updatedTimeStamp.getUTCHours() +\r\n                    \":\" +\r\n                    props.data.updatedTimeStamp.getUTCMinutes() +\r\n                    \":\" +\r\n                    props.data.updatedTimeStamp.getUTCSeconds()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button primary onClick={handleTradeToggle}>\r\n                  See chart\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n\r\n    // <div className={classes.root}>\r\n    //   <Grid container spacing={3}>\r\n    //     <Grid item xs={12}>\r\n    //       <Paper className={classes.paper}>\r\n    //         <Typography>{props.data.name}</Typography>\r\n    //       </Paper>\r\n    //     </Grid>\r\n    //     <Grid item xs={6}>\r\n    //       <Paper className={classes.paper}>\r\n    //         <div>{props.data.price}</div>\r\n    //         <Typography>{props.data.change}</Typography>\r\n    //       </Paper>\r\n    //     </Grid>\r\n    //     <Grid item xs={6}>\r\n    //       <Paper className={classes.paper}>\r\n    //         <Typography>{props.data.updatedTimeStamp.toString()}</Typography>\r\n    //       </Paper>\r\n    //     </Grid>\r\n    //     <Grid item xs={3}>\r\n    //       <Paper className={classes.paper}>\r\n    //         <Button primary onClick={handleTradeToggle}>\r\n    //           See chart\r\n    //         </Button>\r\n    //       </Paper>\r\n    //     </Grid>\r\n    //   </Grid>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default Stocks;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Stocks from \"./components/stocks\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  stocks: {\r\n    paddingBottom: 10\r\n  }\r\n}));\r\n\r\nconst updateStockMarket = (stockUpdates, stocksListObj) => {\r\n  const currentData = JSON.parse(stockUpdates);\r\n  const currentTime = new Date();\r\n  for (const stock of currentData) {\r\n    if (stocksListObj.has(stock[0])) {\r\n      const currentValue = stocksListObj.get(stock[0]);\r\n      stocksListObj.set(stock[0], {\r\n        updatedTimeStamp: currentTime,\r\n        change: currentValue.price - stock[1],\r\n        price: stock[1],\r\n        history:\r\n          currentValue.history.length !== 0\r\n            ? [...currentValue.history, currentValue.price]\r\n            : [currentValue.price],\r\n        name: stock[0],\r\n      });\r\n    } else {\r\n      stocksListObj.set(stock[0], {\r\n        updatedTimeStamp: currentTime,\r\n        change: 0,\r\n        price: stock[1],\r\n        history: [],\r\n        name: stock[0],\r\n      });\r\n    }\r\n  }\r\n  console.log(stocksListObj);\r\n  return stocksListObj;\r\n};\r\nfunction App() {\r\n  const [stocksList, setStocksList] = useState(new Map());\r\n\r\n  useEffect(() => {\r\n    const updateStocksListing = (updateStocks) => {\r\n      return updateStockMarket(updateStocks, stocksList);\r\n    };\r\n\r\n    const ws = new WebSocket(process.env.NODE_ENV === 'production' ? \"wss://stocks.mnet.website\" : \"ws://stocks.mnet.website\");\r\n    ws.onopen = () => {\r\n      console.log(\"connection Established\");\r\n    };\r\n    ws.onmessage = (message) => {\r\n      setStocksList(new Map(updateStocksListing(message.data)));\r\n    };\r\n\r\n    return function cleanup() {\r\n      ws.close();\r\n      console.log(\"connection closed\");\r\n    };\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <h2>Stocks App</h2>\r\n      <div>Inside the Stocks</div>\r\n      <div\r\n        style={{ display: \"grid\", gridTemplateColumns: \"25% auto\", gap: \"20\" }}\r\n      >\r\n        <section className={classes.root}>\r\n          {[...stocksList.values()].map((stockData, index) => (\r\n            <Stocks className={classes.stocks} key={\"stock-\" + index} data={stockData}></Stocks>\r\n          ))}\r\n        </section>\r\n        <section>\r\n          <div>This space is for chart</div>\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}